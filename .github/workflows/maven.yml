name: Java CI

on:
  push:
    branches: # reacting on push action to the following branches
      - develop
      - 'feature/**'

jobs:
  prep: # preparation job, retrieving current version from pom and the shortrev from git
    runs-on: ubuntu-latest
    outputs:
      rev: ${{ steps.shortrev.outputs.rev }}
      ver: ${{ steps.pversion.outputs.ver }}
      date: ${{ steps.date.outputs.date }}
    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 1.8 & run tests & generate artifacts
        uses: actions/setup-java@v1
        with:
          java-version: 1.8 # setting java version to 8
      - id: date
        run: echo "::set-output name=date::$(date +'%y%m%d' | cut -c 2-)"
      - id: shortrev
        run: echo ::set-output name=rev::$(git rev-parse --short HEAD)
      - id: pversion # retrieving the maven version and removing -SNAPSHOT if it is present
        run: echo ::set-output name=ver::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout| sed -e 's/-SNAPSHOT//g')
  versiongenerate:
    runs-on: ubuntu-latest
    needs: prep
    outputs:
      version: ${{ steps.version.outputs.version }} # creating a 'version' variable
    steps:
      - id: version
        run: echo ::set-output name=version::${{ needs.prep.outputs.ver }}-SNAPSHOT-${{ needs.prep.outputs.date }}-${{ needs.prep.outputs.rev }}
  build:
    runs-on: ubuntu-latest
    needs: versiongenerate
    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 1.8 & run tests & generate artifacts
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Version set # setting new version in POM file
        run: mvn versions:set versions:commit -DnewVersion=${{ needs.versiongenerate.outputs.version }}
      - name: Build and test with Maven # running maven build with any specific parameters
        run: mvn -B clean test install -Dgroups="test"
      - name: PMD check # running static code analysis
        run: mvn pmd:check
      - id: getfilename # retrieving full artifact path
        run: echo "::set-output name=file::$(ls target/dal-infrastructure-management-qsc-qsysreflect-${{ needs.versiongenerate.outputs.version }}.jar)"
      - uses: actions/upload-artifact@v1 # uploading the artifact file
        with:
          name: QSysReflect
          path: ${{ steps.getfilename.outputs.file }}